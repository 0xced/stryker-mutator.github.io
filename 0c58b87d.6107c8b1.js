(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{177:function(t,e,r){"use strict";r.d(e,"a",(function(){return u})),r.d(e,"b",(function(){return h}));var a=r(0),n=r.n(a);function o(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function s(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){o(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function p(t,e){if(null==t)return{};var r,a,n=function(t,e){if(null==t)return{};var r,a,n={},o=Object.keys(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||(n[r]=t[r]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)r=o[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(n[r]=t[r])}return n}var c=n.a.createContext({}),l=function(t){var e=n.a.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):s(s({},e),t)),r},u=function(t){var e=l(t.components);return n.a.createElement(c.Provider,{value:e},t.children)},b={inlineCode:"code",wrapper:function(t){var e=t.children;return n.a.createElement(n.a.Fragment,{},e)}},m=n.a.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,i=t.parentName,c=p(t,["components","mdxType","originalType","parentName"]),u=l(r),m=a,h=u["".concat(i,".").concat(m)]||u[m]||b[m]||o;return r?n.a.createElement(h,s(s({ref:e},c),{},{components:r})):n.a.createElement(h,s({ref:e},c))}));function h(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},68:function(t,e,r){"use strict";r.r(e),r.d(e,"frontMatter",(function(){return i})),r.d(e,"metadata",(function(){return s})),r.d(e,"rightToc",(function(){return p})),r.d(e,"default",(function(){return l}));var a=r(2),n=r(6),o=(r(0),r(177)),i={slug:"typescript-support",title:"TypeScript support",author:"Nico Jansen",author_title:"Stryker Team",author_url:"https://github.com/nicojs",author_image_url:"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4",tags:["stryker"]},s={permalink:"/blog/typescript-support",editUrl:"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2017-10-06-typescript-support.md",source:"@site/blog/2017-10-06-typescript-support.md",description:"Stryker 0.10 marks the biggest change in Stryker history yet, as we now support running mutation testing on TypeScript code.",date:"2017-10-06T00:00:00.000Z",tags:[{label:"stryker",permalink:"/blog/tags/stryker"}],title:"TypeScript support",readingTime:3.605,truncated:!0,prevItem:{title:"New HTML reporter",permalink:"/blog/new-html-report"},nextItem:{title:"Stryker 0.8 release",permalink:"/blog/stryker-0-8-0"}},p=[{value:"Language agnostic",id:"language-agnostic",children:[{value:"Mutator plugin api",id:"mutator-plugin-api",children:[]},{value:"Transpiler plugin api",id:"transpiler-plugin-api",children:[]}]},{value:"The TypeScript mutation testing framework",id:"the-typescript-mutation-testing-framework",children:[{value:"&quot;There&#39;s a plugin for that&quot;",id:"theres-a-plugin-for-that",children:[]},{value:"Great! But what about performance?",id:"great-but-what-about-performance",children:[]}]},{value:"What&#39;s next?",id:"whats-next",children:[]}],c={rightToc:p};function l(t){var e=t.components,r=Object(n.a)(t,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,r,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Stryker 0.10 marks the biggest change in Stryker history yet, as we now support running mutation testing on TypeScript code."),Object(o.b)("p",null,"For the entire changelog per package:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker/CHANGELOG.md"}),"stryker changelog")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-api/CHANGELOG.md"}),"stryker-api changelog")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-html-reporter/CHANGELOG.md"}),"stryker-html-reporter changelog")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-typescript/CHANGELOG.md"}),"stryker-typescript changelog")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-mocha-runner/CHANGELOG.md"}),"stryker-mocha-runner changelog")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-mocha-framework/CHANGELOG.md"}),"stryker-mocha-framework changelog"))),Object(o.b)("h2",{id:"language-agnostic"},"Language agnostic"),Object(o.b)("p",null,"Stryker is now language agnostic. This means that you can use Stryker to mutation test ",Object(o.b)("em",{parentName:"p"},"any")," language that\ntranspiles down to JavaScript (as long as you have the correct plugin for it). TypeScript is the first language that is\nfully supported in this way."),Object(o.b)("p",null,"To make this possible we made a number of changes to the Stryker core:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Changed the Mutator plugin api"),Object(o.b)("li",{parentName:"ul"},"Add a Transpiler plugin api")),Object(o.b)("h3",{id:"mutator-plugin-api"},"Mutator plugin api"),Object(o.b)("p",null,"With the previous Mutator plugin, it was possible to mutate a single Abstract Syntax Tree (AST) node. It was a neat little feature,\nbut was never used outside of the core Stryker package. This plugin was also specific to JavaScript.\nAs Stryker is now language agnostic, we decided to move the Mutator api to a higher level of abstraction.\nA Mutator is now responsible for mutating code written in a specific language, instead of a single JS AST node."),Object(o.b)("p",null,"We moved the existing es5 Mutator code into a new Mutator called ",Object(o.b)("inlineCode",{parentName:"p"},"'es5'"),".\nIt is at this moment still part of the main Stryker npm module, but we have plans to remove it later on.\nWe also added a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-typescript/src/TypescriptMutator.ts"}),Object(o.b)("inlineCode",{parentName:"a"},"'typescript'")," mutator"),"\nas part of the new stryker-typescript npm module."),Object(o.b)("p",null,"You can find the new ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-api/src/mutant/Mutator.ts"}),"api definition here"),"."),Object(o.b)("h3",{id:"transpiler-plugin-api"},"Transpiler plugin api"),Object(o.b)("p",null,"With a transpiler plugin, it possible to transform any source code before Stryker runs your tests.\nIt is also used to transpile each mutant in the same way. This allows maximum freedom when\nmutating source code, without having to worry about the resulting JavaScript code.\nA side effect is that it will not work with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/tree/master/packages/stryker#type-of-coverage-analysis"}),"coverage analysis")," yet,\nmeaning that Stryker will force coverage analysis to be ",Object(o.b)("inlineCode",{parentName:"p"},"'off'")," when a transpiler is used."),Object(o.b)("p",null,"We created the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-typescript/src/TypescriptTranspiler.ts"}),Object(o.b)("inlineCode",{parentName:"a"},"'typescript'")," transpiler"),"\nas part of the new ",Object(o.b)("inlineCode",{parentName:"p"},"stryker-typescript")," npm module."),Object(o.b)("p",null,"You can find the new ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-api/src/transpile/Transpiler.ts"}),"api definition here")),Object(o.b)("h2",{id:"the-typescript-mutation-testing-framework"},"The TypeScript mutation testing framework"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/pull/376"}),"Original PR")),Object(o.b)("p",null,"Stryker now supports TypeScript. This means that Stryker is now able to work\ndirectly on your TypeScript code, no need to first transpile it yourself and run Stryker on the transpiled code.\nThis has the following advantages:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Far less false-positives,"),Object(o.b)("li",{parentName:"ul"},"Your stryker reports will now show your code, instead of transpiled code.")),Object(o.b)("h3",{id:"theres-a-plugin-for-that"},'"There\'s a plugin for that"'),Object(o.b)("p",null,"All Stryker plugins to help you with TypeScript are part of a single npm module: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/stryker-typescript"}),"stryker-typescript"),".\nIt contains 3 plugins that work together:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Config Editor"),": A plugin that reads your tsconfig.json file and makes the config available to both the mutator and transpiler."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Mutator"),": A plugin that can mutate TypeScript code. See ",Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/stryker-mutator/stryker/tree/master/packages/stryker-typescript/test/unit/mutator"}),"our unit tests")," to know what mutations are support."),Object(o.b)("li",{parentName:"ol"},Object(o.b)("strong",{parentName:"li"},"Transpiler"),": A plugin that can transpile (mutated) TypeScript code. It uses your tsconfig settings, so the output will be exactly as you'd expect.")),Object(o.b)("p",null,"To configure the plugins you need to add this to your stryker.conf.js file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"module.exports = function (config) {\n  config.set({\n    // ...\n    mutator: 'typescript',\n    transpilers: ['typescript'],\n    tsconfigFile: 'tsconfig.json',\n    // ...\n  });\n};\n")),Object(o.b)("h3",{id:"great-but-what-about-performance"},"Great! But what about performance?"),Object(o.b)("p",null,"You might be thinking all this has a negative impact on performance.\nAfter all, we have to transpile the TypeScript code for each mutant we want to test.\nWhen running Stryker on itself we notice that it takes less time than before when we were mutating JavaScript.\nThis is because transpiling each mutant ensures that no false positives are tested. Results for your project may differ."),Object(o.b)("p",null,"Take the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/blob/master/packages/stryker-typescript/src/mutator/BinaryExpressionMutator.ts"}),"BinaryExpressionMutator"),"\nfor example. It might mutate:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"'foo' + 'bar';\n")),Object(o.b)("p",null,"into:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"'foo' - 'bar';\n")),Object(o.b)("p",null,"Although this would be valid in JavaScript, it is ",Object(o.b)("em",{parentName:"p"},"invalid")," in TypeScript.\nThis means that the mutant will result in a ",Object(o.b)("inlineCode",{parentName:"p"},"TranspileError"),". It is ",Object(o.b)("em",{parentName:"p"},"not")," tested and ",Object(o.b)("em",{parentName:"p"},"not")," calculated into your mutation score.\nLess work means it can be faster."),Object(o.b)("h2",{id:"whats-next"},"What's next?"),Object(o.b)("p",null,"Next, we want to further improve upon our TypeScript support. For example we want to add support\nfor ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/stryker-mutator/stryker/tree/master/packages/stryker#type-of-coverage-analysis"}),"coverage analysis"),"\nwhen using a transpiler. We're also thinking about an es6 mutator using Babel under the hood."),Object(o.b)("p",null,"Please let us know what you think."))}l.isMDXComponent=!0}}]);