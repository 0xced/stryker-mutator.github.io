(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{175:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n(3),r=(n(0),n(196));const i={slug:"typescript-coverage-analysis-support",title:"TypeScript coverage analysis support",author:"Nico Jansen",author_title:"Stryker Team",author_url:"https://github.com/nicojs",author_image_url:"https://avatars3.githubusercontent.com/u/1828233?s=400&u=fec18ad3776aaafec54c49bbd7173a841ae7ea59&v=4",tags:["stryker"]},o={permalink:"/blog/typescript-coverage-analysis-support",editUrl:"https://github.com/stryker-mutator/stryker-mutator.github.io/edit/develop/blog/2018-01-10-typescript-coverage-analysis-support.md",source:"@site/blog/2018-01-10-typescript-coverage-analysis-support.md",title:"TypeScript coverage analysis support",description:"Let's start this new year strong. Stryker 0.18 adds coverage analysis support for transpilers, starting with the TypeScript transpiler.",date:"2018-01-10T00:00:00.000Z",formattedDate:"January 10, 2018",tags:[{label:"stryker",permalink:"/blog/tags/stryker"}],readingTime:4.62,truncated:!0,prevItem:{title:"Webpack support is here",permalink:"/blog/webpack-support"},nextItem:{title:"Stryker adds Babel support",permalink:"/blog/babel-support"}},s=[{value:"Coverage analysis",id:"coverage-analysis",children:[{value:"Coverage analysis: &#39;all&#39;",id:"coverage-analysis-all",children:[]},{value:"Coverage analysis: &#39;perTest&#39;",id:"coverage-analysis-pertest",children:[]}]},{value:"The challenge with transpiled code",id:"the-challenge-with-transpiled-code",children:[]},{value:"Bridging the gap",id:"bridging-the-gap",children:[]},{value:"Show me the numbers",id:"show-me-the-numbers",children:[]},{value:"What&#39;s next?",id:"whats-next",children:[]}],l={toc:s};function c({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Let's start this new year strong. Stryker 0.18 adds coverage analysis support for transpilers, starting with the TypeScript transpiler."),Object(r.b)("p",null,"This article first explains the basics of ",Object(r.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Code_coverage"},"(code) coverage")," analysis for mutation testing in general, before focussing on the new feature."),Object(r.b)("p",null,"See the original PR for even more details:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://github.com/stryker-mutator/stryker-js/pull/559"},"feat(coverage analysis): Support transpiled code #559"))),Object(r.b)("h2",{id:"coverage-analysis"},"Coverage analysis"),Object(r.b)("p",null,"It might not sound particularly sexy, but (code) coverage analysis is an important feature of any mutation testing framework.\nMutation testing takes a long time. The most effective way to save time, is to do less work."),Object(r.b)("p",null,"Take this small piece of JavaScript code:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"// Source code:\nfunction sum(a, b) {\n  return a + b;\n}\n\nfunction product(a, b) {\n  return a * b;\n}\n\nfunction difference(a, b) {\n  return a - b;\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"// The tests:\ndescribe('Math', () => {\n  it('should give 3 for sum(1, 2)', () => {\n    expect(sum(1, 2)).to.eq(3);\n  });\n\n  it('should give 12 for product(3, 4)', () => {\n    expect(product(3, 4)).to.eq(12);\n  });\n});\n")),Object(r.b)("h3",{id:"coverage-analysis-all"},"Coverage analysis: 'all'"),Object(r.b)("p",null,"As you can see the ",Object(r.b)("inlineCode",{parentName:"p"},"sum")," and ",Object(r.b)("inlineCode",{parentName:"p"},"product")," functions are reasonably well tested, but the the ",Object(r.b)("inlineCode",{parentName:"p"},"difference")," function isn't tested at all."),Object(r.b)("p",null,"For example: what would the result be for the mutant that changes ",Object(r.b)("inlineCode",{parentName:"p"},"a - b")," to ",Object(r.b)("inlineCode",{parentName:"p"},"a + b"),"? It doesn't even make sense to test it,\nanyone can see it will survive anyway."),Object(r.b)("p",null,"If you set coverage analysis to ",Object(r.b)("inlineCode",{parentName:"p"},"'all'")," inside your stryker.conf.js file, this is exactly what happens. Stryker will automatically\ncollect code coverage results during the initial test run phase","*",". If a mutant mutates code that is not tested,\nit will be marked as ",Object(r.b)("em",{parentName:"p"},"'no coverage'")," (which translates to ",Object(r.b)("em",{parentName:"p"},"survived")," during the score calculation) without ever testing it.\nThis can safe minutes on larger code bases."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Coverage analysis is not supported for Jest yet.")),Object(r.b)("h3",{id:"coverage-analysis-pertest"},"Coverage analysis: 'perTest'"),Object(r.b)("p",null,"Nice! We're already saving time by analyzing a simple code coverage result. But if we take a closer look, we see that we can save even more time."),Object(r.b)("p",null,"Take the ",Object(r.b)("inlineCode",{parentName:"p"},"product")," function for example: we want to test the mutant that changes ",Object(r.b)("inlineCode",{parentName:"p"},"a * b")," to ",Object(r.b)("inlineCode",{parentName:"p"},"a / b"),". We see that it is covered by a test, so\nwe cannot skip the actual testing of this mutant. However, we can save time by only running the one test that covers this mutant."),Object(r.b)("p",null,"If you set coverage analysis to ",Object(r.b)("inlineCode",{parentName:"p"},"'perTest'")," inside your stryker.conf.js file, this is exactly what happens. Stryker will automatically\ncollect code coverage results ",Object(r.b)("em",{parentName:"p"},"per test")," during the initial test run phase. Next, it will select only those tests that actually cover\na mutant to run for that mutant (again, not supported for Jest yet). This might seem like a small improvements,\nbut in big projects with 100s of tests, it quickly adds up to minutes."),Object(r.b)("p",null,"It is important to realize that this does not influence the quality of the resulting report at all. It simply less work to reach the same conclusion."),Object(r.b)("h2",{id:"the-challenge-with-transpiled-code"},"The challenge with transpiled code"),Object(r.b)("p",null,"Now that we have a firm understanding of coverage analysis and why it is important, lets dive into the new stuff.\nAfter all, coverage analysis is nothing new for Stryker, it has been there for a long time.\nHowever, it gets more complicated when you add a transpiler to the (delicious) mutation testing mix."),Object(r.b)("p",null,"Please read ",Object(r.b)("a",{parentName:"p",href:"/blog/typescript-support"},"our blog article on transpiling code")," if your interested in the details on how transpilers are implemented in Stryker.\nFor now it is is enough that you understand that Stryker mutates your ",Object(r.b)("em",{parentName:"p"},"source")," code, while running the ",Object(r.b)("em",{parentName:"p"},"transpiled")," code in the test runner.\nAny coverage analysis we collect will only tell us about the ",Object(r.b)("em",{parentName:"p"},"transpiled")," covered code, while the mutants only work on your ",Object(r.b)("em",{parentName:"p"},"source")," code."),Object(r.b)("p",null,"Take this small piece of TypeScript code:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-typescript"},"// TypeScript: before transpiling\nclass Math {\n  static sum(a: number, b: number) {\n    return a + b;\n  }\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-javascript"},"// JavaScript: after transpiling (target: es5)\nvar Math = /** @class */ (function () {\n  function Math() {}\n  Math.sum = function (a, b) {\n    return a + b;\n  };\n  return Math;\n})();\n")),Object(r.b)("p",null,"Even with this small example, you can already see that the location of ",Object(r.b)("inlineCode",{parentName:"p"},"a + b")," in source code vs transpiled code is totally different.\nWe need to translate the location of a mutant to the actual transpiled location somehow."),Object(r.b)("h2",{id:"bridging-the-gap"},"Bridging the gap"),Object(r.b)("p",null,"Luckily, any respectable transpiler can produce ",Object(r.b)("a",{parentName:"p",href:"https://www.thecssninja.com/javascript/source-mapping"},"source maps"),".\nThey are used by code editors and browsers to debug source code while executing transpiled/minified/bundled code.\nAnd, as of now, this is what is used by Stryker to calculate the transpiled location."),Object(r.b)("p",null,"So if you select coverage analysis 'all' or 'perTest' while transpiling using typescript, the stryker-typescript transpiler\nplugin will produce source maps during the initial test run. Stryker will use those source maps to translate the transpiled location\nof all mutants."),Object(r.b)("h2",{id:"show-me-the-numbers"},"Show me the numbers"),Object(r.b)("p",null,"Unfortunately, we do not have a good performance testing mechanism for Stryker yet (PRs and ideas are welcome!),\nbut the results for mutation testing on Stryker itself are very promising, shaving off about 6 minutes for single run,\nabout a 50% performance increase."),Object(r.b)("h2",{id:"whats-next"},"What's next?"),Object(r.b)("p",null,"Next up we'll work on getting this performance increase to all supported transpilers.\nWe're also working behind the scenes on a transpiler plugin for webpack. Which you can also expect\nwithin the next couple of weeks."),Object(r.b)("p",null,"In the meantime: have fun with this feature. Are you using it? Please let is know what you think! We're always\ninterested to know what we can improve further."),Object(r.b)("p",null,"Have fun."))}c.isMDXComponent=!0},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},h=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,d=u["".concat(o,".").concat(h)]||u[h]||b[h]||i;return n?r.a.createElement(d,s(s({ref:t},c),{},{components:n})):r.a.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);