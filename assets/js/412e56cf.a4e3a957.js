(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{107:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),r=(n(0),n(196));const o={title:"Composite pattern",custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/FolderComponents.md"},i={unversionedId:"stryker-net/technical-reference/ProjectComponents",id:"stryker-net/technical-reference/ProjectComponents",isDocsHomePage:!1,title:"Composite pattern",description:"Stryker.NET uses custom classes to keep track of folders and files. These classes are based on the composite pattern.",source:"@site/docs/stryker-net/technical-reference/ProjectComponents.md",slug:"/stryker-net/technical-reference/ProjectComponents",permalink:"/docs/stryker-net/technical-reference/ProjectComponents",editUrl:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/FolderComponents.md",version:"current",sidebar:"docs",previous:{title:"Mutant schemata",permalink:"/docs/stryker-net/technical-reference/Mutant-schemata"},next:{title:"Getting started",permalink:"/docs/stryker4s/getting-started"}},l=[{value:"UML of the classes in the namespace Stryker.Core.ProjectComponents",id:"uml-of-the-classes-in-the-namespace-strykercoreprojectcomponents",children:[]},{value:"Old Design",id:"old-design",children:[]},{value:"New Design",id:"new-design",children:[]},{value:"ReadOnly variants",id:"readonly-variants",children:[]}],c={toc:l};function s({components:e,...t}){return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Stryker.NET uses custom classes to keep track of folders and files. These classes are based on the composite pattern."),Object(r.b)("p",null,"These FolderComposite and FileLeafs have readonly variants, this is done to ensure the mutated sourcecode and Mutants are not changed after the mutation is placed."),Object(r.b)("h3",{id:"uml-of-the-classes-in-the-namespace-strykercoreprojectcomponents"},"UML of the classes in the namespace Stryker.Core.ProjectComponents"),Object(r.b)("p",null,Object(r.b)("img",{alt:"Folder Components",src:n(283).default})),Object(r.b)("h3",{id:"old-design"},"Old Design"),Object(r.b)("p",null,"The global structure was as follows: "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FolderComposite")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FileLeaf"))),Object(r.b)("p",null,"With the abstract class they both implement:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ProjectComponent"))),Object(r.b)("h3",{id:"new-design"},"New Design"),Object(r.b)("p",null,"When implementing F# the old structure showed it's disadvantages since F# uses a different type to indicate syntaxtrees."),Object(r.b)("p",null,"To solve this ",Object(r.b)("inlineCode",{parentName:"p"},"ProjectComponent")," was made generic ",Object(r.b)("inlineCode",{parentName:"p"},"ProjectComponent<T>"),"."),Object(r.b)("p",null,"However many parts of stryker use ",Object(r.b)("inlineCode",{parentName:"p"},"FolderComposite")," and ",Object(r.b)("inlineCode",{parentName:"p"},"FileLeaf")," without needing access to the syntaxtrees or to know what language is used.\nFor this purpose the Interface IProjectComponent is used."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"IFolderComposite")," and ",Object(r.b)("inlineCode",{parentName:"p"},"IFileLeaf")," are implemented for the same reason.\nThis enables code to ask for an ",Object(r.b)("inlineCode",{parentName:"p"},"IFileLeaf")," so It can access the elements that do not depend on the language, that being all except the syntaxtrees."),Object(r.b)("p",null,"For applications that do need access to the syntaxtrees ",Object(r.b)("inlineCode",{parentName:"p"},"ProjectComponent<T>")," can be used or the specific type, being:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CsharpFolderComposite")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CsharpFileLeaf"))),Object(r.b)("p",null,"OR"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FsharpFolderComposite")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FsharpFileLeaf"))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"IFileLeaf<T>")," is needed to have languageagnostic notation for the syntaxtrees."),Object(r.b)("h3",{id:"readonly-variants"},"ReadOnly variants"),Object(r.b)("p",null,"Not al code is created equaly, and not all parts of stryker need write access to the ProjectComponents.\nThis is why a IReadOnyProjectcomponent was created."),Object(r.b)("p",null,"When expanding into F# we found the implementation lacking and expanded upon it.\nThere are ReadOnly variants of ",Object(r.b)("inlineCode",{parentName:"p"},"FolderComponent")," and ",Object(r.b)("inlineCode",{parentName:"p"},"FileLeaf"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ReadOnlyFolderComponent")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ReadOnlyFileLeaf"))),Object(r.b)("p",null,"The readonly variants do not need access to the syntaxtrees so they are languageagnostic which improves the expandability of Stryker.NET"),Object(r.b)("p",null,"The variant of ",Object(r.b)("inlineCode",{parentName:"p"},"FolderComponent")," and ",Object(r.b)("inlineCode",{parentName:"p"},"FileLeaf")," all contain the functions ",Object(r.b)("inlineCode",{parentName:"p"},"ToReadOnly()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"ToReadOnlyInputComponent()"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ToReadOnly()")," returns the ReadOnly varient of said type. ",Object(r.b)("inlineCode",{parentName:"p"},"ToReadOnlyInputComponent()")," does the same, just casted to ",Object(r.b)("inlineCode",{parentName:"p"},"IReadOnlyProjectComponent"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"ToReadOnly()")," takes the interfaces ",Object(r.b)("inlineCode",{parentName:"p"},"IParentComponent")," and ",Object(r.b)("inlineCode",{parentName:"p"},"IFileLeaf")," as input so the readonly variants do not need to distinguish between ",Object(r.b)("inlineCode",{parentName:"p"},"CsharpFileLeaf")," and FsharpFileLeaf for example. "),Object(r.b)("h5",{id:"note"},"Note"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"FolderComponent")," and ",Object(r.b)("inlineCode",{parentName:"p"},"FileLeaf")," are NOT classes that exist in Stryker.NET only the languagespecific implementations exist!"))}s.isMDXComponent=!0},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||o;return n?r.a.createElement(m,l(l({ref:t},s),{},{components:n})):r.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},283:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/ProjectComponents-81f99ffe693d231584109f171fa95aae.png"}}]);