(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return u}));var r=n(3),a=(n(0),n(196));const c={title:"Research",custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md"},o={unversionedId:"stryker-net/technical-reference/Research",id:"stryker-net/technical-reference/Research",isDocsHomePage:!1,title:"Research",description:"Stryker.NET wants to be a blazing fast mutation test framework. To achieve this some research has taken place before designing the framework.",source:"@site/docs/stryker-net/technical-reference/Research.md",sourceDirName:"stryker-net/technical-reference",slug:"/stryker-net/technical-reference/Research",permalink:"/docs/stryker-net/technical-reference/Research",editUrl:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md",version:"current",frontMatter:{title:"Research",custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/stryker-net/technical-reference/Introduction"},next:{title:"Mutant schemata",permalink:"/docs/stryker-net/technical-reference/Mutant-schemata"}},i=[{value:"Criteria",id:"criteria",children:[]},{value:"Options",id:"options",children:[]},{value:"Comparison",id:"comparison",children:[{value:"Mutating source code",id:"mutating-source-code",children:[]},{value:"Mutating byte code",id:"mutating-byte-code",children:[]},{value:"Mutant schemata (mutation switching)",id:"mutant-schemata-mutation-switching",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],l={toc:i};function u({components:e,...t}){return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Stryker.NET wants to be a blazing fast mutation test framework. To achieve this some research has taken place before designing the framework."),Object(a.b)("h2",{id:"criteria"},"Criteria"),Object(a.b)("p",null,"The framework had to conform the following criteria:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Be fast"),Object(a.b)("li",{parentName:"ul"},"Be able to show the exact location of the mutations to the user"),Object(a.b)("li",{parentName:"ul"},"The following mutations should be able to be made",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Binary mutations"),Object(a.b)("li",{parentName:"ul"},"Boolean mutations"),Object(a.b)("li",{parentName:"ul"},"Logical mutations"),Object(a.b)("li",{parentName:"ul"},"Conditional mutations"),Object(a.b)("li",{parentName:"ul"},"Unary mutations"),Object(a.b)("li",{parentName:"ul"},"Return value mutations")))),Object(a.b)("h2",{id:"options"},"Options"),Object(a.b)("p",null,"By looking at other frameworks two options could be found regarding architectures:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Mutating source code (",Object(a.b)("a",{parentName:"li",href:"https://stryker-mutator.io/"},"Stryker"),")"),Object(a.b)("li",{parentName:"ul"},"Mutating byte code (",Object(a.b)("a",{parentName:"li",href:"http://pitest.org/"},"PiTest"),")")),Object(a.b)("p",null,"Later another architecture was found: mutant schemata (also dubbed mutation switching). This technique places all mutations inside if statements. Such an if statement could look like:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-csharp"},'if(Environment.GetEnvironmentVariable("ActiveMutation") == "1") {\n  i--; // mutated code\n} else {\n  i++; // original code\n}\n')),Object(a.b)("h2",{id:"comparison"},"Comparison"),Object(a.b)("p",null,"For each option a seperate prototype has been created. The results showed the following pros and cons. "),Object(a.b)("h3",{id:"mutating-source-code"},"Mutating source code"),Object(a.b)("p",null,"Pros:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Exact location can be shown to users.")),Object(a.b)("p",null,"Cons:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Each mutation has to be compiled seperate. So mutating is slow.")),Object(a.b)("h3",{id:"mutating-byte-code"},"Mutating byte code"),Object(a.b)("p",null,"Pros:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Fast")),Object(a.b)("p",null,"Cons:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Mutators are difficult to create."),Object(a.b)("li",{parentName:"ul"},"Exact location cannot be shown to users.")),Object(a.b)("h3",{id:"mutant-schemata-mutation-switching"},"Mutant schemata (mutation switching)"),Object(a.b)("p",null,"Pros:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"All mutants can be compiled at once, so mutating is fast."),Object(a.b)("li",{parentName:"ul"},"Exact location can be shown to users."),Object(a.b)("li",{parentName:"ul"},"Mutated assembly can be kept in memory during mutation testruns."),Object(a.b)("li",{parentName:"ul"},"Mutation coverage can be easily calculated."),Object(a.b)("li",{parentName:"ul"},"Testing multiple mutations in one testrun is possible.")),Object(a.b)("p",null,"Cons:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Not all mutations are possible",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Mutating constant values"),Object(a.b)("li",{parentName:"ul"},"Mutating method names"),Object(a.b)("li",{parentName:"ul"},"Mutating access modifiers"))),Object(a.b)("li",{parentName:"ul"},"Compile errors should not occur.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Since all mutations will compile at once, all mutations should compile correctly")))),Object(a.b)("h2",{id:"conclusion"},"Conclusion"),Object(a.b)("p",null,"Mutant schemata works fastest and the exact location for every mutation can be shown to the user. Stryker.NET has chosen the path of mutant schemata."))}u.isMDXComponent=!0},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),s=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=s(n),p=r,h=b["".concat(o,".").concat(p)]||b[p]||m[p]||c;return n?a.a.createElement(h,i(i({ref:t},u),{},{components:n})):a.a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var u=2;u<c;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);