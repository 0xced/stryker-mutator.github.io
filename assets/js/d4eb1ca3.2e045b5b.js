(self.webpackChunkstryker_mutator_github_io=self.webpackChunkstryker_mutator_github_io||[]).push([[9948],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(r),m=a,h=f["".concat(i,".").concat(m)]||f[m]||p[m]||o;return r?n.createElement(h,c(c({ref:t},u),{},{components:r})):n.createElement(h,c({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=f;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},20377:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return i},default:function(){return u}});var n=r(22122),a=(r(67294),r(3905));const o={custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/fsharp/CurrentState.md"},c=void 0,s={unversionedId:"stryker-net/technical-reference/fsharp/CurrentState",id:"stryker-net/technical-reference/fsharp/CurrentState",isDocsHomePage:!1,title:"CurrentState",description:"The following have been added to secure Fsharp support in the future:",source:"@site/docs/stryker-net/technical-reference/fsharp/CurrentState.md",sourceDirName:"stryker-net/technical-reference/fsharp",slug:"/stryker-net/technical-reference/fsharp/CurrentState",permalink:"/docs/stryker-net/technical-reference/fsharp/CurrentState",editUrl:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/fsharp/CurrentState.md",version:"current",frontMatter:{custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/fsharp/CurrentState.md"},sidebar:"docs",previous:{title:"Classes",permalink:"/docs/stryker-net/technical-reference/fsharp/Classes"},next:{title:"Packages",permalink:"/docs/stryker-net/technical-reference/fsharp/Packages"}},i=[],l={toc:i};function u({components:e,...t}){return(0,a.kt)("wrapper",(0,n.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The following have been added to secure Fsharp support in the future:"),(0,a.kt)("p",null,"Code:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"FsharpCompilingProcess.cs",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"used to compile fsharp SyntaxTrees")),(0,a.kt)("li",{parentName:"ul"},"Fsharp variant of the ProjectComponents",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"used to simulate a file structure in Stryker, and keep track of files in general")),(0,a.kt)("li",{parentName:"ul"},"FsharpProjectComponentsBuilder.cs",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"used to instantiate the ProjectComponents for F#")),(0,a.kt)("li",{parentName:"ul"},"a set of classes to create Orchestrators for F# SyntaxTrees (ParsedInput)",(0,a.kt)("br",{parentName:"li"}),(0,a.kt)("em",{parentName:"li"},"used to iterate over a given SyntaxTree")),(0,a.kt)("li",{parentName:"ul"},"FsharpMutationProcess.cs\n",(0,a.kt)("em",{parentName:"li"},"added to connect the different processes")),(0,a.kt)("li",{parentName:"ul"},"MutationTestProcess.cs\n",(0,a.kt)("em",{parentName:"li"},"used to start the FsharpMutationProcess.cs"))),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Packages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"FSharp.Compiler.Service"),(0,a.kt)("li",{parentName:"ul"},"Microsoft.FSharp"),(0,a.kt)("li",{parentName:"ul"},"FSharp.Core")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"Other:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a .fs file to  use for the creation of tests for the F#-components"),(0,a.kt)("li",{parentName:"ul"},"a test project writen in F# to use as input for Stryker.net"),(0,a.kt)("li",{parentName:"ul"},"a C# project use to test the process of iterating on a SyntaxTree in F#"),(0,a.kt)("li",{parentName:"ul"},"general cleanup of existing code")))}u.isMDXComponent=!0}}]);