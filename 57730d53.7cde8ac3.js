(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),c=(n(0),n(194)),o={title:"Research",custom_edit_url:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md"},i={unversionedId:"stryker-net/technical-reference/Research",id:"stryker-net/technical-reference/Research",isDocsHomePage:!1,title:"Research",description:"Stryker.NET wants to be a blazing fast mutation test framework. To achieve this some research has taken place before designing the framework.",source:"@site/docs/stryker-net/technical-reference/Research.md",slug:"/stryker-net/technical-reference/Research",permalink:"/docs/stryker-net/technical-reference/Research",editUrl:"https://github.com/stryker-mutator/stryker-net/edit/master/docs/technical-reference/research.md",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/stryker-net/technical-reference/Introduction"},next:{title:"Mutant schemata",permalink:"/docs/stryker-net/technical-reference/Mutant-schemata"}},l=[{value:"Criteria",id:"criteria",children:[]},{value:"Options",id:"options",children:[]},{value:"Comparison",id:"comparison",children:[{value:"Mutating source code",id:"mutating-source-code",children:[]},{value:"Mutating byte code",id:"mutating-byte-code",children:[]},{value:"Mutant schemata (mutation switching)",id:"mutant-schemata-mutation-switching",children:[]}]},{value:"Conclusion",id:"conclusion",children:[]}],u={toc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Stryker.NET wants to be a blazing fast mutation test framework. To achieve this some research has taken place before designing the framework."),Object(c.b)("h2",{id:"criteria"},"Criteria"),Object(c.b)("p",null,"The framework had to conform the following criteria:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Be fast"),Object(c.b)("li",{parentName:"ul"},"Be able to show the exact location of the mutations to the user"),Object(c.b)("li",{parentName:"ul"},"The following mutations should be able to be made",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Binary mutations"),Object(c.b)("li",{parentName:"ul"},"Boolean mutations"),Object(c.b)("li",{parentName:"ul"},"Logical mutations"),Object(c.b)("li",{parentName:"ul"},"Conditional mutations"),Object(c.b)("li",{parentName:"ul"},"Unary mutations"),Object(c.b)("li",{parentName:"ul"},"Return value mutations")))),Object(c.b)("h2",{id:"options"},"Options"),Object(c.b)("p",null,"By looking at other frameworks two options could be found regarding architectures:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Mutating source code (",Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"https://stryker-mutator.io/"}),"Stryker"),")"),Object(c.b)("li",{parentName:"ul"},"Mutating byte code (",Object(c.b)("a",Object(a.a)({parentName:"li"},{href:"http://pitest.org/"}),"PiTest"),")")),Object(c.b)("p",null,"Later another architecture was found: mutant schemata (also dubbed mutation switching). This technique places all mutations inside if statements. Such an if statement could look like:"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),'if(Environment.GetEnvironmentVariable("ActiveMutation") == "1") {\n  i--; // mutated code\n} else {\n  i++; // original code\n}\n')),Object(c.b)("h2",{id:"comparison"},"Comparison"),Object(c.b)("p",null,"For each option a seperate prototype has been created. The results showed the following pros and cons. "),Object(c.b)("h3",{id:"mutating-source-code"},"Mutating source code"),Object(c.b)("p",null,"Pros:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Exact location can be shown to users.")),Object(c.b)("p",null,"Cons:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Each mutation has to be compiled seperate. So mutating is slow.")),Object(c.b)("h3",{id:"mutating-byte-code"},"Mutating byte code"),Object(c.b)("p",null,"Pros:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Fast")),Object(c.b)("p",null,"Cons:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Mutators are difficult to create."),Object(c.b)("li",{parentName:"ul"},"Exact location cannot be shown to users.")),Object(c.b)("h3",{id:"mutant-schemata-mutation-switching"},"Mutant schemata (mutation switching)"),Object(c.b)("p",null,"Pros:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"All mutants can be compiled at once, so mutating is fast."),Object(c.b)("li",{parentName:"ul"},"Exact location can be shown to users."),Object(c.b)("li",{parentName:"ul"},"Mutated assembly can be kept in memory during mutation testruns."),Object(c.b)("li",{parentName:"ul"},"Mutation coverage can be easily calculated."),Object(c.b)("li",{parentName:"ul"},"Testing multiple mutations in one testrun is possible.")),Object(c.b)("p",null,"Cons:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Not all mutations are possible",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Mutating constant values"),Object(c.b)("li",{parentName:"ul"},"Mutating method names"),Object(c.b)("li",{parentName:"ul"},"Mutating access modifiers"))),Object(c.b)("li",{parentName:"ul"},"Compile errors should not occur.",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"Since all mutations will compile at once, all mutations should compile correctly")))),Object(c.b)("h2",{id:"conclusion"},"Conclusion"),Object(c.b)("p",null,"Mutant schemata works fastest and the exact location for every mutation can be shown to the user. Stryker.NET has chosen the path of mutant schemata. "))}s.isMDXComponent=!0},194:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),s=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},b=function(e){var t=s(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),b=s(n),p=a,h=b["".concat(o,".").concat(p)]||b[p]||m[p]||c;return n?r.a.createElement(h,i(i({ref:t},u),{},{components:n})):r.a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,o=new Array(c);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<c;u++)o[u]=n[u];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"}}]);